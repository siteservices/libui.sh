#!/usr/bin/env libui
#####
#
#	Workspace Setup - Set up a workspace environment
#
#	F Harvell - Fri Feb 17 19:04:07 EST 2023
#
#####
#
# {libui tool} Write a .config/workspace file in the user's home directory and
# save a workspace environment in the .config/wsenv directory in the user's home
# directory.
#
# If a WORKSPACE parameter is not provided, the path provided in the WORKSPACE
# environment variable will be used. If the WORKSPACE environment variable is
# not defined, the ~/.config/workspace file will be sourced (to define
# WORKSPACE). If WORKSPACE remains undefined, the current directory is used.
#
# Man page available for this script: man 1 wssetup
#
#####
#
# Copyright 2018-2025 siteservices.net, Inc. and made available in the public
# domain. Permission is unconditionally granted to anyone with an interest, the
# rights to use, modify, publish, distribute, sublicense, and/or sell this
# content and associated files.
#
# All content is provided "as is", without warranty of any kind, expressed or
# implied, including but not limited to merchantability, fitness for a
# particular purpose, and noninfringement. In no event shall the authors or
# copyright holders be liable for any claim, damages, or other liability,
# whether in an action of contract, tort, or otherwise, arising from, out of,
# or in connection with this content or use of the associated files.
#
#####

##### libui setup

# script version
Version -r 2.002 1.7

# load mods
LoadMod File
LoadMod Workspace

##### configuration

# defaults
retval=0

##### options - libui already uses options h, H, X:

AddOption -n default -f -k 'Default' -d 'Only change default workspace.' d
AddOption -n envdata -m -k 'Env Data' -d 'Environment data that should be included in workspace.' e:
AddParameter -r -k 'Workspace' -d 'Workspace, i.e. directory above the repo trees.' WORKSPACE

##### callbacks

# usage information callback
InfoCallback () {
  Trace 'Provide usage information.'
  cat << EOF
This script creates a .config/workspace file in the user's directory.
EOF
}

# initialization callback
InitCallback () {
  Trace 'In user init callback.'

  Trace 'Validate workspace. (%s)' "${WORKSPACE}"
  ValidateWorkspace -n
}

##### functions

# write workspace file
Write_workspace () {
  Trace 'Prepare workspace file. (%s)' "${_WS_wsfile}"
  local ws="#!/bin/zsh
#####
#
#	Workspace File
#	$(date) - $(Version)
#
######

# set workspace
export WORKSPACE=\"${WORKSPACE/${HOME}/\${HOME\}}\"

return 0
"

  Trace 'Write workspace file. (%s)' "${_WS_wsfile}"
  printf '%s' "${ws}" > "${_WS_wsfile}" || Error 'Unable to write workspace file. (%s)' "${_WS_wsfile}"

  return ${?}
}

# write workspace environment file
Write_wsenv () { # <env_data>
  Trace 'Prepare workspace environment file. (%s)' "${_WS_wsenv}/${WORKSPACE##*/}${_WS_wsenvext}"
  local wsenv="#!/bin/zsh
#####
#
#	Workspace Environment for ${WORKSPACE}
#	$(date) - $(Version)
#
######

# configure workspace
export WORKSPACE=\"${WORKSPACE/${HOME}/\${HOME\}}\"
${@/%/${N}}
return 0
"

  Trace 'Create workspace environment directory. (%s)' "${_WS_wsenv}"
  [[ -d "${_WS_wsenv}" ]] || Action "mkdir -p '${_WS_wsenv}'"

  Trace 'Write workspace environment file. (%s)' "${_WS_wsenv}/${WORKSPACE##*/}${_WS_wsenvext}"
  printf '%s' "${wsenv}" > "${_WS_wsenv}/${WORKSPACE##*/}${_WS_wsenvext}" || \
      Error 'Unable to write workspace environment file. (%s)' "${_WS_wsenv}/${WORKSPACE##*/}${_WS_wsenvext}"

  return ${?}
}

##### initialization

# initialize UI
Initialize


#####
#
# main program
#
#####

Trace 'Start %s. (%s)' "${CMD}" "${CMDLINE}"

Trace 'Move to WORKSPACE. (%s)' "${WORKSPACE}"
pushd "${WORKSPACE}" > /dev/null

Trace 'Write workspace file. (%s)' "${WORKSPACE##*/}"
Write_workspace && Alert 'Workspace file created. (%s)' "${WORKSPACE##*/}"
((retval+=${?}))

Trace 'Check if only changing default. (%s)' "${default}"
if ! ${default}
then
  Trace 'Write workspace environment. (%s)' "${WORKSPACE##*/}"
  Write_wsenv "${envdata[@]}" && Alert 'Workspace environment created. (%s)' "${WORKSPACE##*/}"
  ((retval+=${?}))
fi

Trace 'Exit %s. (%s)' "${CMD}" "${retval}"
Exit ${retval}
