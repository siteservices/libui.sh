#!/usr/bin/env libui
#####
#
#	Update Projects - Update repos and rebuild projects
#
#	F Harvell - Sun Aug 14 13:04:19 EDT 2022
#
#####
#
# {libui tool} Used to issue a "git pull" (if a git repository) and rebuild for
# projects in the WORKSPACE directory that have a .buildrecipie script in the
# project root directory. The WORKSPACE directory needs to be the directory path
# above the project repositories.
#
# If a WORKSPACE parameter is not provided, the path provided in the WORKSPACE
# environment variable will be used. If the WORKSPACE environment variable is
# not defined, the ~/.local/workspace file will be sourced (to define
# WORKSPACE). If WORKSPACE remains undefined, the current directory is used.
#
# Man page available for this script: man 1 updateprojects
#
#####
#
# Copyright 2018-2025 siteservices.net, Inc. and made available in the public
# domain. Permission is unconditionally granted to anyone with an interest, the
# rights to use, modify, publish, distribute, sublicense, and/or sell this
# content and associated files.
#
# All content is provided "as is", without warranty of any kind, expressed or
# implied, including but not limited to merchantability, fitness for a
# particular purpose, and noninfringement. In no event shall the authors or
# copyright holders be liable for any claim, damages, or other liability,
# whether in an action of contract, tort, or otherwise, arising from, out of,
# or in connection with this content or use of the associated files.
#
#####

##### libui setup

# script version
Version -r 2.010 1.14

# load mods
LoadMod File
LoadMod Spinner
LoadMod Workspace

##### configuration

# defaults
recipefile=".buildrecipe"
GetTmp tmpdir
failure=false
processed=false

##### options - libui already uses options h, H, X:

AddOption -n projects -m -S plist -v 'GetFileList -c ${WORKSPACE} -f -p plist "*/.buildrecipe"' -k 'Project' -d 'Project to build.' p:
AddOption -n gitstatus -f -k 'Status' -d 'Display repo git status.' s
AddParameter -k 'Workspace' -d 'Workspace, i.e. directory above the repo trees.' WORKSPACE

##### callbacks

# usage information callback
InfoCallback () {
  Trace 'Provide usage information.'
  cat << EOF
Used to issue a "git pull" (if a git repository) and rebuild for projects in
the WORKSPACE directory that have a .buildrecipie script in the project root
directory. See man page or source header for more information.
EOF
}

# initialization callback
InitCallback () {
  Trace 'Program initialization.'

  Trace 'Validate workspace. (%s)' "${WORKSPACE}"
  ValidateWorkspace -w
  Tell 'Working in: %s' "${PWD}"

  Trace 'Get projects. (%s)' "${projects}"
  [[ -z "${projects}" ]] && GetFileList -c ${WORKSPACE} -f -p projects "*/.buildrecipe"
}

##### functions

##### initialization

# initialize UI
Initialize


#####
#
# main program
#
#####

Trace 'Start %s. (%s)' "${CMD}" "${CMDLINE}"

Trace 'Process projects. (%s)' "${projects}"
for project in "${projects[@]}"
do
  Verbose && Tell '========== %s' "${project}"

  if Verify -C 'Build %s?' "${project}"
  then
    Trace 'Change directory. (%s)' "${project}"
    if pushd "${project}" &> /dev/null
    then
      if [[ -e '.git' ]]
      then
        Trace 'Pull latest updates. (%s)' "${project}"
        Action -i "Pulling latest updates. (${project})" -c -l "${tmpdir}/${project}-pull.log" 'git pull --all'
        Action -i "Updating submodules. (${project})" -a -l "${tmpdir}/${project}-pull.log" 'git submodule update --init --recursive'

        Trace 'Check for status. (%s)' "${gitstatus}"
        if ${gitstatus}
        then
          Trace 'Display current repo status. (%s)' "${projet}"
          Tell -- '----- %s status' "${project}"
          Action -q "Get project status? (${project})" 'git status'
        fi

        Trace 'Get update status. (%s)' "${tmpdir}/${project}-pull.log"
        pullstatus=$(<"${tmpdir}/${project}-pull.log")
      fi

      Trace 'Check if up to date.'
      if Force || [[ ! "${pullstatus}" =~ .*Already\ up[-\ ]to[-\ ]date\..* ]]
      then
        Trace 'Build project. (%s)' "${project}"
        if Action -q "Build project? (${project})" -i "Building project. (${project})" -c -l "${tmpdir}/${project}-build.log" "source ${recipefile}"
        then
          processed=true
          Alert 'Project %s has been updated.' "${project}"
        else
          failure=true
        fi
      else
        Tell 'No updates available. (%s)' "${project}"
      fi

      popd &> /dev/null
    else
      Error 'Unable to access project directory. (%s)' "${project}"
    fi
  fi
done

GetFileList logs "${tmpdir}/*.log"
Trace 'Check for errors. (%s)' "${logs[*]}"
egrep -q '(Abort|WARNING|ERROR)' "${logs[@]}" && failure=true && Warn 'Problems were encountered during processing.'

Trace 'Check for processed projects. (%s)' "${processed}"
if ${processed}
then
  Trace 'Check for failure. (%s)' "${failure}"
  ${failure} && Verify 'A build failure occurred. Exit and delete logs? (%s)' "${tmpdir}" ||
      Alert "Projects are up to date."
else
  Tell "No project updates to process."
fi

Trace 'Exit %s. (%s)' "${CMD}" 0
Exit 0
