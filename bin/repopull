#!/usr/bin/env libui
#####
#
#	Workspace Repository Pull All
#
#	F Harvell - Sat Jun 13 15:04:53 EDT 2020
#
#####
#
# {libui tool} Used to issue an (optional) "git checkout branch", "git pull",
# and (optional) git merge branch in each repository in the WORKSPACE directory.
# The WORKSPACE directory needs to be the directory path above the git
# repositories.
#
# If a WORKSPACE parameter is not provided, the path provided in the WORKSPACE
# environment variable will be used. If the WORKSPACE environment variable is
# not defined, the ~/.local/workspace file will be sourced (to define
# WORKSPACE). If WORKSPACE remains undefined, the current directory is used.
#
# Note: interpolates branch names using associative array sourced from
# ~/.local/repopull.conf file with array like:
#
#    {branch}=( {repo} {dev_branch_name} ... )
#
# For example, interpolation array for the dev branch:
#    declare -A dev
#    dev=(
#      artifactory-helpers master
#      devops_tools develop
#      tr3_pcd develop
#      tr3_tools develop
#    )
#
# Man page available for this script: man 1 repopull
#
#####
#
# Copyright 2018-2025 siteservices.net, Inc. and made available in the public
# domain. Permission is unconditionally granted to anyone with an interest, the
# rights to use, modify, publish, distribute, sublicense, and/or sell this
# content and associated files.
#
# All content is provided "as is", without warranty of any kind, expressed or
# implied, including but not limited to merchantability, fitness for a
# particular purpose, and noninfringement. In no event shall the authors or
# copyright holders be liable for any claim, damages, or other liability,
# whether in an action of contract, tort, or otherwise, arising from, out of,
# or in connection with this content or use of the associated files.
#
#####

##### libui setup

# script version
Version -r 2.010 6.6

# load mods
LoadMod File
LoadMod Workspace

##### configuration

# defaults
mapfile="${HOME}/.config/repopull.conf"
declare -A branchmap
processed=false
GetTmp tmpdir

# source repo information
[[ -f "${mapfile}" ]] && source "${mapfile}"

##### options - libui already uses options h, H, X:

AddOption -n branch -k 'Branch' -d 'Specify the branch to check out.' b:
AddOption -n clean -f -k 'Clean' -d 'Clean the repo by removing files and resetting to HEAD.' c
AddOption -n merge -k 'Merge' -d 'Specify the branch to merge.' m:
AddOption -n gitstatus -f -k 'Status' -d 'Display repo status.' s
AddParameter -k 'Workspace' -d 'Workspace, i.e. directory above the repo trees.' WORKSPACE

##### callbacks

# usage information callback
InfoCallback () {
  Trace 'Provide usage information.'
  cat << EOF
Used to issue an (optional) "git checkout branch", "git pull", and (optional)
git merge branch in each repository in the WORKSPACE directory. See man page or
source header for more information.
EOF
}

# initialization callback
InitCallback () {
  Trace 'Program initialization.'

  Trace 'Validate workspace. (%s)' "${WORKSPACE}"
  ValidateWorkspace -w
  Tell 'Working in: %s' "${PWD}"
}

##### functions

##### initialization

# initialize UI
Initialize


#####
#
# main program
#
#####

Trace 'Start %s. (%s)' "${CMD}" "${CMDLINE}"

Verbose && Tell '\nUpdate repos.'
GetFileList -e repos '*/.git'
Trace 'Process project repos. (%s)' "${repos[*]}"
for git in "${repos[@]}"
do
  repo="${git%%/*}"
  updated=false

  Trace 'Process repo. (%s)' "${repo}"
  if [[ -d "${repo}" && ! -L "${repo}" && 'x' != "${repo}" ]]
  then
    pushd "${repo}" > /dev/null

    current=$(git symbolic-ref --short HEAD)
    Verbose && Tell '========== %s repo (%s)' "${repo}" "${current}"

    Trace 'Check for clean. (%s)' "${clean}"
    if ${clean}
    then
      Trace 'Cleaning repo. (%s)' "${repo}"
      Action -C -i "Reset repo. (${repo})" -q "Really reset ${repo} repo?" -c -l "${tmpdir}/${repo}-reset.log" 'git reset --hard' && updated=true
      Action -C -i "Clean repo. (${repo})" -q "Really clean ${repo} repo?" -c -l "${tmpdir}/${repo}-clean.log" 'git clean -dfx' && updated=true
    fi

    Trace 'Pull repo. (%s)' "${repo}"
    if Action -i "Pulling latest updates. (${repo})" -e "Pull failure in ${repo}." -q "Pull in ${repo}?" -c -l "${tmpdir}/${repo}-pull.log" 'git pull --all'
    then
      Trace 'Check if up to date.'
      pullstatus=$(<"${tmpdir}/${repo}-pull.log")
      [[ "${pullstatus}" =~ .*Already\ up.to.date\..* ]] || updated=true
    fi

    Trace 'Check for branch. (%s)' "${branch}"
    if [[ -n "${branch}" ]]
    then
      Trace 'Check for branch in %s. (%s)' "${mapfile}" "${branch}"
      [[ -z "${(P)branch}" ]] && branchmap=( ) || branchmap=( "${(@kvP)branch}" )
      if [[ -z "${branchmap[${repo}]}" ]]
      then
        Trace 'Check if branch is current branch. (%s=%s)' "${branch}" "${current}"
        if [[ "${branch}" != "${current}" ]]
        then
          Trace 'Check for branch. (%s)' "${branch}"
          if git branch --all | grep "${branch}" &> /dev/null
          then
            Trace 'Check out branch. (%s)' "${branch}"
            Action -i "Check out branch. (${branch})" -q "Check out ${branch}?" -c -l "${tmpdir}/${branch//\//-}-checkout.log" "git checkout '${branch}'" && updated=true
          fi
        fi
      else
        Trace 'Check if %s branch is current branch. (%s=%s)' "${mapfile}" "${branchmap[${repo}]}" "${current}"
        if [[ "${branchmap[${repo}]}" != "${current}" ]]
        then
          Trace 'Check for %s branch. (%s)' "${mapfile}" "${branchmap[${repo}]}"
          if git branch --all | grep "${branchmap[${repo}]}" &> /dev/null
          then
            Trace 'Check out %s branch. (%s)' "${mapfile}" "${branchmap[${repo}]}"
            Action -i "Check out branch. (${branchmap[${repo}]})" -q "Check out ${branchmap[${repo}]}?" -c -l "${tmpdir}/${branchmap[${repo}]}-checkout.log" "git checkout '${branchmap[${repo}]}'" && updated=true
          fi
        fi
      fi
      current=$(git symbolic-ref --short HEAD)
    fi

    Trace 'Check for merge. (%s)' "${merge}"
    if [[ -n "${merge}" ]]
    then
      Trace 'Check for merge branch in %s. (%s)' "${mapfile}" "${merge}"
      [[ -z "${(P)merge}" ]] && branchmap=( ) || branchmap=( "${(@kvP)merge}" )
      if [[ -z "${branchmap[${repo}]}" ]]
      then
        Trace 'Check if merge branch is current branch. (%s=%s)' "${merge}" "${current}"
        if [[ "${merge}" != "${current}" ]]
        then
          Trace 'Check for merge branch. (%s)' "${merge}"
          if git branch --all | grep "${merge}" &> /dev/null
          then
            Trace 'Merge branch. (%s)' "${merge}"
            Action -i "Merge branch into current. (${merge} -> ${current})" -q "Merge ${merge} into ${current}?" -c -l "${tmpdir}/${merge}-merge.log" "git merge 'origin/${merge}'" && updated=true
          fi
        fi
      else
        Trace 'Check if %s branch is current branch. (%s=%s)' "${mapfile}" "${branchmap[${repo}]}" "${current}"
        if [[ "${branchmap[${repo}]}" != "${current}" ]]
        then
          Trace 'Check for %s branch. (%s)' "${mapfile}" "${branchmap[${repo}]}"
          if git branch --all | grep "${branchmap[${repo}]}" &> /dev/null
          then
            Trace 'Merge %s branch. (%s)' "${mapfile}" "${branchmap[${repo}]}"
            Action -i "Merge branch into current. (${branchmap[${repo}]} -> ${current})" -q "Merge ${branchmap[${repo}]} into ${current}?" -c -l "${tmpdir}/${branchmap[${repo}]}-merge.log" "git merge 'origin/${branchmap[${repo}]}'" && updated=true
          fi
        fi
      fi
    fi

    Trace 'Check for status. (%s)' "${gitstatus}"
    if ${gitstatus}
    then
      Trace 'Display current repo status. (%s)' "${repo}"
      Tell -- '----- %s status (%s)' "${repo}" "${current}"
      Action -q "Get ${repo} repo status?" 'git status'
    fi

    if ${updated}
    then
      Alert 'Repo has been updated. (%s: %s)' "${repo}" "${current}"
      processed=true
    else
      Tell 'No repo updates available. (%s: %s)' "${repo}" "${current}"
    fi

    popd > /dev/null
  fi
done

Verbose && Tell '\nUpdate submodules.'
GetFileList submodules '*/.gitmodules'
Trace 'Process project submodules. (%s)' "${submodules[*]}"
for git in "${submodules[@]}"
do
  repo=${git%%/*}
  updated=false

  Trace 'Work repo. (%s)' "${repo}"
  if [[ -d "${repo}" && ! -L "${repo}" && 'x' != "${repo}" ]]
  then
    Trace 'Update repo submodules. (%s)' "${repo}"
    pushd ${repo} > /dev/null
    Verbose && Tell -- '---------- %s submodules' "${repo}"
    Action -i "Update submodule. (${repo})" -q "Update submodule in ${repo} repo?" -c -l "${tmpdir}/${repo}-submodule-update.log" 'git submodule update'
    #Action -i "Update submodule. (${repo})" -q "Update submodule in ${repo} repo?" -c -l "${tmpdir}/${repo}-submodule-update.log" 'git submodule update --remote'

    Trace 'Check if up to date.'
    updatestatus=$(grep -v 'ACTION' "${tmpdir}/${repo}-submodule-update.log" | wc -l)
    [[ 0 -lt "${updatestatus}" ]] && updated=true

    Trace 'Check for clean. (%s)' "${clean}"
    if ${clean}
    then
      Trace 'Cleaning submodule.'
      Action -C -i "Reset submodule. (${repo})" -q "Really reset submodule in ${repo} repo?" -c -l "${tmpdir}/${repo}-submodule-reset.log" 'git submodule reset --hard' && updated=true
      Action -C -i "Clean submodule. (${repo})" -q "Really clean submodule in ${repo} repo?" -c -l "${tmpdir}/${repo}-submodule-clean.log" 'git submodule clean -dfx' && updated=true
    fi

    if ${updated}
    then
      Alert 'Submodules in %s have been updated.' "${repo}"
      processed=true
    else
      Tell 'No submodule updates available. (%s)' "${repo}"
    fi

    popd > /dev/null
  fi
done

Trace 'Check for errors. (%s)' "${tmpdir}"
GetFileList logs "${tmpdir}/*.log" && \
    egrep -q '(Abort|WARNING|ERROR)' "${logs[@]}" && Error 'Problems were encountered during the pull.'

Trace 'Check for processed repos. (%s)' "${processed}"
${processed} && Alert 'Pull was successful.'

Trace 'Exit %s. (%s)' "${CMD}" 0
Exit 0
